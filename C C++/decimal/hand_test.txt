// есть такие комменты 

// ЗАПУСКАТЬ
	// написать make hand
	// сайт для проверки http://www.javascripter.net/math/calculators/100digitbigintcalculator.htm

// ЗАДАНИЕ ДЕЦИМАЛ
	// • в виде массива  (выделяются в одни фигурные скобки,
	//				  перечисляются через запятую)
	
	// • в виде "строки" (если вся строка не вмещается, то конец отбрасывается,
	//				  знак ставиться в упор

// ФУНКЦИИ
	// формат такой  arg1 func arg2  (не везде нужен arg2)

	// • арифметические действия задаются как +, -, *, /
	// • сравнения как <, <=, ==, >, >=, !=
	// • перевод: decimal_to_int, ...
	
	// еще в коде использовались функции деления/умножения на 10, их бы тоже проверить:
	// • умножение на 10: cmt
	// • деление на 10 (с отбросом дробной части):         cdt
	// • деление на 10 (округление в зависимости от arg2): cdt_round
				 // arg2 == 0  -      без       округления
				 // arg2 == 1  -   банковское   округление
				 // arg2 == 2  - арифметическое округление

	// еще использовалась функция деления нацело (nazelo) она принимает два децимала
	// в ней не учитывается "масштабирование" (bits[3]), т.е. десятичная точка
	// а именно, в итоговом значение точка "ставитьcя" на место где была в arg1
	//   	1.04 nazelo 0.100  ->  104 / 100  =  1 и осаток 4
	//			   -> 1.04 nazelo 0.100  =  0.01 и осаток 0.04


//ПРИМЕРЫ
1.04 nazelo 0.100

-0.1293125 cmt

-0.1293125 cdt
-0.1293125 cdt_round 0
-0.1293125 cdt_round 1
-0.1293125 cdt_round 2

0.01293e29 float_to_decimal
{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000} decimal_to_float

{0xFFFFFFFF, 0x000003E7, 0x00982000, 0x00030000} + {24, 0, 0, 0x80030000}
{0xFFFFFFFF, 542, 312, 0x00030000} + -0.029129323


79228162514196783599133392894 + 0.5
79228162514196783599133392895 + 0.5
79228162514196783599133392894 - 0.5
79228162514196783599133392895 - 0.5

79228162514196783599133392894 + 1.5
79228162514196783599133392895 + 1.5
79228162514196783599133392894 - 1.5
79228162514196783599133392895 - 1.5

79228162514264337593543950335 + 0.5
79228162514264337593543950335 - 0.5
79228162514264337593543950335 + 1.5
79228162514264337593543950335 - 1.5

-123.1231 <= -123.1232 



// to test nightcore
//10000000000000000000000000001  / 8.922816250406433709354395001  //OK
//10000000000000000000000000001  / 5.9228162504064337093543950002 //OK
//39614081257132168796771975170  / 7.922816251426433759354395038  //OK

//good test
//15845632502852867518708790063 / 7.9228162514264337593543950335 //OK
//15845632502852867518708790065 / 7.9228162514264337593543950335 //OK
//15845632502852867518708790066 / 7.9228162514264337593543950335 //OK
//15845632502852867518708790067 / 7.9228162514264337593543950335 //OK
//15845632502852867518708790068 / 7.9228162514264337593543950335 //OK
//15845632502852867518708790069 / 7.9228162514264337593543950335 //OK
//15845632502852867518708790070 / 7.9228162514264337593543950335 //OK

//1 / 125 //OK
//73382530011411470074835159780 - 71305346262837903834189555297


//23768448754279301278063185098 / 7.9228162514264337593543950335 //OK
//23768448754279301278063185099 / 7.9228162514264337593543950335 //OK
//23768448754279301278063185100 / 7.9228162514264337593543950335 //OK
//23768448754279301278063185101 / 7.9228162514264337593543950335 //OK


//good test
//39614081257132168796771975160 / 7.9228162514264337593543950335 //OK
//39614081257132168796771975165 / 7.9228162514264337593543950335 //OK
//39614081257132168796771975166 / 7.9228162514264337593543950335 //OK
//39614081257132168796771975173 / 7.9228162514264337593543950335 //OK


//47536897508558602556126370359 / 7922816251426433759354395059   //OK
//47536897508558602556126370200 / 7.9228162514264337593543950334 //OK
//47536897508558602556126370200 / 79228162514264337593543950334  //OK


//47536897508558602556126370200 / 7.9228162514264337593543950335 //OK
//47536897508558602556126370193 / 7.9228162514264337593543950322 //OK
//47536897508558602556126370200 * 79228162514264337593


//Eee find! another god test  -mistake(
//396140812571321687967719751638 / 7.9228162514264337593543950327

//39614081257132168796771975163 / 7.9228162514264337593543950327
//39614081257132168796771950167 / 7.9228162514264337593543900335
63382530011411470074835120267 / 7.9228162514264337593543900334
